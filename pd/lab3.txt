//zad 1 abcdef
import java.util.Random;
public class Main {

    public static void main(String[] args) {
	Random r = new Random();
	int n = r.nextInt(100-1)+1;
	int[] tab = new int[n];
	for(int i=0;i<=n - 1;i++)
	{
		tab[i] = r.nextInt(1000+999)-999;
		System.out.println(tab[i]);
	}
	int p=0;
	int np=0;
	for(int j=0;j<=n-1;j++)
	{
		if(tab[j]%2==0)
		{
			p++;
		}
		else if(tab[j]%2==1)
		{
			np++;
		}
	}
	System.out.println("parzyste liczby: "+p);
	System.out.println("nieparzyste liczby: "+np);
	int dod = 0;
	int uj = 0;
	int zer = 0;
	for(int k=0;k<=n-1;k++)
	{
		if(tab[k]<0)
		{
			uj++;
		}
		else if(tab[k]>0)
		{
			dod++;
		}
		else if(tab[k]==0)
		{
			zer++;
		}
	}
	System.out.println("dodatnie"+dod);
	System.out.println("ujemne "+uj);
	System.out.println("zera "+zer); 
	int najw=tab[0];
	int ilenaj=0;
	for(int x=0;x<n-1;x++)
	{
		if(najw<tab[x])
			najw = tab[x];
	}
	for(int z=0;z<n-1;z++)
	{
		if(najw == tab[z])
			ilenaj++;
	}
	System.out.println("najwiekszy ele to "+najw+" i wystepuje on "+ilenaj+" razy");
	int sumau=0;
	int sumad=0;
	for(int i=0;i<n-1;i++)
	{
		if(tab[i]<0)
		{
			sumau+=tab[i];
		}
		if(tab[i]>0)
		{
			sumad+=tab[i];
		}
	}
	System.out.println("suma uj "+sumau);
	System.out.println("suma dod "+sumad);
	int dlugdod=0;
	int maxlen=1;
	for(int l=0;l<n-1;l++)
	{
		if(tab[l]>0 && tab[l+1]>0)
		{
			dlugdod++;
			if(dlugdod>maxlen)
			{
				maxlen=dlugdod;
			}

		}
	}
	System.out.println(maxlen);
	for(int i=0;i<n-1;i++)
	{
		if(tab[i]>0)
		{
			tab[i]=1;
		}
		else if(tab[i]<=0)
		{
			tab[i]=-1;
		}
	}
	for(int a=0;a<n-1;a++)
	{
		System.out.print(tab[a]+ " ");
	}
    }
}
// zad 1 g
import java.util.Scanner;
public class Main {

    public static void main(String[] args) {
        Scanner x = new Scanner(System.in);
        int number = x.nextInt();
        int min=-999;
        int max=999;
        int l = x.nextInt();
        int p = x.nextInt();
        int [] tab = new  int[number];
        int [] tab2 = tab;
        for(int i=0;i<number;i++)
        {
            tab[i]=(int)(Math.random()*((max-min)+1))+min;
        }
        for(int i=0;i<number;i++)
        {
            System.out.println(tab[i]);
        }
        System.out.println("Po zamianie");
        for(int i = 0; i < l; i++)
        {
           tab2[i]=tab[i];
        }
        for(int i = p; i < number; i++)
        {
            tab2[i]=tab[i];
        }
        while (l < p)
        {
            int pom = tab[l];
            tab[l]  = tab[p];
            tab[p] = pom;
            l++;
            p--;
        }
        for(int i=0;i<number;i++)
        {
            System.out.println(tab[i]);
        }

    }
}
//zad 2 
import java.util.Random;
public class Main {
    public static int ileNieparzystych(int tab[])
    {
        int x=0;
        for(int i = 0;i<tab.length-1;i++)
        {
            if(tab[i]%2==1)
                x++;
        }
        return x;
    }
    public static int ileParzystych(int tab[])
    {
        int x=0;
        for(int i=0;i<tab.length-1;i++)
        {
            if(tab[i]%2==0)
                x++;
        }
        return x;
    }
    public static int ileDodatnich(int tab[])
    {
        int x=0;
        for(int i=0;i<tab.length-1;i++)
        {
            if(tab[i]>0)
                x++;
        }
        return x;
    }
    public static int ileUjemnych(int tab[])
    {
        int x=0;
        for(int i=0;i<tab.length-1;i++)
        {
            if(tab[i]<0)
                x++;
        }
        return x;
    }
    public static int ileZerowych(int tab[])
    {
        int x=0;
        for(int i=0;i<tab.length-1;i++)
        {
            if(tab[i]==0)
                x++;
        }
        return x;
    }
    public static int ileMaksymalnych(int tab[])
    {
        int max=tab[0];
        int ilemax=0;
        for(int i=0;i<tab.length-1;i++)
        {
            if(max<tab[i])
                max = tab[i];
        }
        for(int j=0;j<tab.length-1;j++)
        {
            if(max == tab[j])
                ilemax++;
        }
        return ilemax;
    }
    public static int sumaDodatnich(int tab[])
    {
        int x=0;
        for(int i=0;i<tab.length-1;i++)
        {
            if(tab[i]>0)
                x+=tab[i];
        }
        return x;
    }
    public static int sumaUjemnych(int tab[])
    {
        int x=0;
        for(int i=0;i<tab.length-1;i++)
        {
            if(tab[i]<0)
            {
                x+=tab[i];
            }
        }
        return x;
    }
    public static int dlugoscMaksymalnegoCiaguDodatnich(int tab[])
    {
        int len=0;
        int maxlen=1;
        for(int i=0;i<tab.length-1;i++)
        {
            if(tab[i]>0 && tab[i+1]>0)
            {
                len++;
                if(len>maxlen)
                {
                    maxlen=len;
                }
            }
            else
            {
                len=0;
            }
        }
        return maxlen;
    }
    public static void odwrocFragment(int tab[],int l,int p)
    {
        for(int i=0;i<l;i++)
        {
            int temp = tab[i];
            tab[i]=tab[tab.length-1-i];
            tab[tab.length-1-1]=temp;
        }
        for(int j=p;j<p;j++)
        {
            int temp2=tab[j];
            tab[j] = tab[tab.length-1-j];
            tab[tab.length-1-j] = temp2;
        }
        for(int k=0;k<tab.length-1;k++)
        {
            System.out.println(tab[k]);
        }
    }
    public static void signum(int tab[])
    {
        for(int i=0;i<tab.length-1;i++)
        {
            if(tab[i]>0)
            {
                tab[i]=1;
            }
            else if(tab[i]<0)
            {
                tab[i]=0;
            }
        }
        for(int j=0;j<tab.length-1;j++)
        {
            System.out.println(tab[j]);
        }
    }
    public static void main(String[] args) {
	Random r = new Random();
	int n = r.nextInt(99)+1;
	int[] tab = new int[n];
	for(int p=0;p<=tab.length-1;p++)
    {
        tab[p]= r.nextInt(1999)-999;
        System.out.println(tab[p]);
    }
   System.out.println("nieparzystych liczb "+ileNieparzystych(tab));
	System.out.println("parzystych liczb"+ileParzystych(tab));
	System.out.println("dodatnich liczb "+ileDodatnich(tab));
	System.out.println("ujemnych liczb"+ileUjemnych(tab));
	System.out.println("zer"+ileZerowych(tab));
	System.out.println("maksymalnych liczb"+ileMaksymalnych(tab));
	System.out.println("suma liczb dod"+sumaDodatnich(tab));
	System.out.println("suma liczb uj"+sumaUjemnych(tab));
	System.out.println("dlugosc maksymalnego ciagu dod: "+dlugoscMaksymalnegoCiaguDodatnich(tab));
	odwrocFragment(tab,3,7);
    }
}
//zad 3
import java.util.Scanner;

public class Main {
    public static void generuj(int tab[][],int n,int m,int minWartosc,int maxWartosc)
    {
        for(int i=0;i<n;i++)
            for(int j=0;j<m;j++)
        tab[i][j] = (int)(Math.random()*((maxWartosc-minWartosc)+1))+minWartosc;
    }
    public static void wypisz(int tab[][],int n,int m)
    {
        for(int i=0;i<n;i++){
        for(int j=0;j<m;j++)
        System.out.print(tab[i][j] + " ");
        System.out.println();
    }
    }

    static void mnozenie(  int n1, int m1, int A[][],int n2, int m2, int B[][])
    {
        int i, j, k;
        if (n2 != m1) {
            return;
        }
        int C[][] = new int[n1][m2];
        for (i = 0; i < n1; i++) {
            for (j = 0; j < m2; j++) {
                for (k = 0; k < n2; k++)
                    C[i][j] += A[i][k] * B[k][j];
            }
        }
        wypisz(C, n1, m2);
    }
    public static void main(String[] args) { 
        Scanner x = new Scanner(System.in);
        System.out.println("3 liczby podaj");
        int m = x.nextInt();
        int n= x.nextInt();
        int k = x.nextInt();
        int[][] macierz1 = new int[m][n];
        int[][] macierz2 = new int[n][k];
        generuj(macierz1, m, n, 1, 10);
        generuj(macierz2, n, k, 1, 10);
        System.out.println("A");
        wypisz(macierz1, m, n);
        System.out.println("B");
        wypisz(macierz2, n, k);
        System.out.println("AxB");
        mnozenie(n, m, macierz1, n, k, macierz2);
}
} 